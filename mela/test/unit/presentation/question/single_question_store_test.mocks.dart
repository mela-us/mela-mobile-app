// Mocks generated by Mockito 5.4.4 from annotations
// in mela/test/unit/presentation/question/single_question_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:io' as _i4;

import 'package:mela/presentation/question/store/single_question/single_question_store.dart'
    as _i3;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReactiveContext_0 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SingleQuestionStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockSingleQuestionStore extends _i1.Mock
    implements _i3.SingleQuestionStore {
  MockSingleQuestionStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<List<_i4.File>> get userImage => (super.noSuchMethod(
        Invocation.getter(#userImage),
        returnValue: <List<_i4.File>>[],
      ) as List<List<_i4.File>>);

  @override
  set userImage(List<List<_i4.File>>? value) => super.noSuchMethod(
        Invocation.setter(
          #userImage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get currentQuizAnswer => (super.noSuchMethod(
        Invocation.getter(#currentQuizAnswer),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentQuizAnswer),
        ),
      ) as String);

  @override
  set currentQuizAnswer(String? value) => super.noSuchMethod(
        Invocation.setter(
          #currentQuizAnswer,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get currentImageAnswer => (super.noSuchMethod(
        Invocation.getter(#currentImageAnswer),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set currentImageAnswer(List<String>? value) => super.noSuchMethod(
        Invocation.setter(
          #currentImageAnswer,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get currentAnswer => (super.noSuchMethod(
        Invocation.getter(#currentAnswer),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentAnswer),
        ),
      ) as String);

  @override
  List<String> get userAnswers => (super.noSuchMethod(
        Invocation.getter(#userAnswers),
        returnValue: <String>[],
      ) as List<String>);

  @override
  int get currentIndex => (super.noSuchMethod(
        Invocation.getter(#currentIndex),
        returnValue: 0,
      ) as int);

  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);

  @override
  void generateAnswerList(int? length) => super.noSuchMethod(
        Invocation.method(
          #generateAnswerList,
          [length],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeQuestion(int? index) => super.noSuchMethod(
        Invocation.method(
          #changeQuestion,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAnswer(
    int? index,
    String? userAnswer,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setAnswer,
          [
            index,
            userAnswer,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setQuizAnswerValue(String? value) => super.noSuchMethod(
        Invocation.method(
          #setQuizAnswerValue,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setImageAnswer(
    int? index,
    List<_i4.File>? images,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setImageAnswer,
          [
            index,
            images,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void printAllAnswer() => super.noSuchMethod(
        Invocation.method(
          #printAllAnswer,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
